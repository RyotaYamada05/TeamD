//=============================================================================
//
// オブジェクト処理 [scene.cpp]
// Author : 山田陵太
//
//=============================================================================
#include "scene.h"

//=============================================================================
//静的メンバ変数宣言
//=============================================================================
CScene *CScene::m_apScene[MAX_NUM] = {};	//オブジェクトクラスのポインタ変数
int CScene::m_nNumAll = 0;	//オブジェクトの総数カウント変数
bool CScene::m_bPause = false;

//=============================================================================
//オブジェクトクラスのデフォルトコンストラクタ
//=============================================================================
CScene::CScene()
{
	//最大ポリゴン数分繰り返す
	for (int nCntScene = 0; nCntScene < MAX_NUM; nCntScene++)
	{
		//メモリが確保されていないとき
		if (m_apScene[nCntScene] == NULL)
		{
			//ポインタ情報の取得
			m_apScene[nCntScene] = this;

			//オブジェクトタイプの初期設定
			m_apScene[nCntScene]->m_ObjType = CScene::OBJTYPE_NONE;

			//作成したインスタンスの番号を保存
			m_nID = nCntScene;

			//総数のカウントアップ
			m_nNumAll++;
			break;
		}
	}
}

//=============================================================================
//オブジェクトクラスのデフォルトデストラクタ
//=============================================================================
CScene::~CScene()
{
}

//=============================================================================
//全ての終了処理
//=============================================================================
void CScene::ReleaseAll(void)
{
	//最大ポリゴン数分繰り返す
	for (int nCntScene = 0; nCntScene < MAX_NUM; nCntScene++)
	{
		//メモリが確保できていたら
		if (m_apScene[nCntScene] != NULL)
		{
			//終了処理呼び出し
			m_apScene[nCntScene]->Uninit();
		}
	}
}

//=============================================================================
//全ての更新処理
//=============================================================================
void CScene::AllUpdate(void)
{
	//最大ポリゴン数分繰り返す
	for (int nCntScene = 0; nCntScene < MAX_NUM; nCntScene++)
	{
		CScene *pScene = GetScene(nCntScene);

		if (pScene != NULL)
		{
			// それぞれのタイプ
			OBJTYPE type = pScene->GetObjType();

			// ポーズしているか　bool pause = m_pause   ->>  pause =true ->> if (type == OBJTYPE_PAUSE)
			if (m_bPause == false || type == OBJTYPE_PAUSE)
			{
				//メモリが確保できていたら
				if (m_apScene[nCntScene] != NULL)
				{
					//更新処理呼び出し
					m_apScene[nCntScene]->Update();
				}
			}
		}
	}
}


//=============================================================================
//全ての描画処理
//=============================================================================
void CScene::AllDraw(void)
{
	//最大ポリゴン数分繰り返す
	for (int nCntScene = 0; nCntScene < MAX_NUM; nCntScene++)
	{
		//メモリが確保できていたら
		if (m_apScene[nCntScene] != NULL)
		{
			//描画処理呼び出し
			m_apScene[nCntScene]->Draw();
		}
	}
}

//=============================================================================
//削除処理
//=============================================================================
void CScene::Release(void)
{
	//メモリが確保できていたら
	if (m_apScene[m_nID] != NULL)
	{
 		int nID = m_nID;

		//メモリを削除
		delete m_apScene[nID];

		//メモリのクリア
		m_apScene[nID] = NULL;

		//総数を減らす
		m_nNumAll--;
	}
}

//=============================================================================
//オブジェクトタイプ設定処理
//=============================================================================
void CScene::SetObjType(const OBJTYPE objtype)
{
	//メモリが確保できていたら
	if (m_apScene[m_nID] != NULL)
	{
		m_apScene[m_nID]->m_ObjType = objtype;
	}
}

//=============================================================================
//オブジェクトタイプ情報取得処理
//=============================================================================
CScene::OBJTYPE CScene::GetObjType(void)const
{

	return m_apScene[m_nID]->m_ObjType;
}

//=============================================================================
//オブジェクト情報取得処理
//=============================================================================
CScene * CScene::GetScene(int nNum)
{
	return m_apScene[nNum];
}

//=============================================================================
//ポーズ情報の取得
//=============================================================================
void CScene::GetPause(bool Pause)
{
	m_bPause = Pause;
}