//=============================================================================
//
// ミサイル処理 [missile.h]
// Author : 山田陵太
//
//=============================================================================
#ifndef _MISSILE_H_
#define _MISSILE_H_

//=============================================================================
//インクルードファイル
//=============================================================================
#include "scene.h"

//=============================================================================
//マクロ定義
//=============================================================================
#define MAX_MODEL_MISSILE_PARTS 2

//=============================================================================
//前方宣言
//=============================================================================
class CModelAnime;

//=============================================================================
//ミサイルクラス
//=============================================================================
class CMissile : public CScene
{
public:
	//=============================================================================
	//　モデルファイル情報の構造体
	//=============================================================================
	typedef struct
	{
		char xFileName[1024];	//ファイルネーム
		D3DXVECTOR3 offsetPos;	//位置のオフセット情報
		D3DXVECTOR3 offsetRot;	//向きのオフセット情報
		int nParent;	//親情報
	}MODELFILLE;

	//=========================================================================
	//メンバ関数宣言
	//=========================================================================
	CMissile();
	~CMissile();

	static CMissile *Create(D3DXVECTOR3 pos, D3DXVECTOR3 size ,D3DXVECTOR3 rot, D3DXVECTOR3 move);

	HRESULT Init(const D3DXVECTOR3 pos, const D3DXVECTOR3 size);
	void Uninit(void);
	void Update(void);
	void Draw(void);
	void SetRot(D3DXVECTOR3 rot);
	void SetMove(D3DXVECTOR3 move);
	HRESULT ReadFile(void);

private:
	//=========================================================================
	//メンバ関数宣言
	//=========================================================================
	D3DXVECTOR3 m_pos;							//位置
	D3DXVECTOR3 m_rot;							//向き
	D3DXVECTOR3 m_move;							//移動量
	D3DXVECTOR3 m_size;							//サイズ
	int m_nLife;								//ライフ
	CModelAnime *m_apModelAnime[MAX_MODEL_MISSILE_PARTS];				//階層モデルクラスのポインタ変数
	D3DXMATRIX m_mtxWorld;						// ワールドマトリックス
};

#endif 