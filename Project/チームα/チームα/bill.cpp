//=============================================================================
//
// ビル処理 [bill.cpp]
// Author : 佐藤颯紀
//
//=============================================================================
#include "bill.h"
#include "manager.h"
#include "renderer.h"

//=============================================================================
// static初期化
//=============================================================================
LPD3DXMESH CBill::m_pMesh = NULL;			// メッシュ情報へのポインタ
LPD3DXBUFFER CBill::m_pBuffMat = NULL;	// マテリアル情報へのポインタ
DWORD CBill::m_nNumMat = 0;				// マテリアル情報の数

//=============================================================================
// クリエイト
//=============================================================================
CBill * CBill::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	// 初期化処理
	CBill *pBill= new CBill;

	// 初期化処理
	pBill->Init(pos, size);

	return pBill;
}

//=============================================================================
// モデルロード
//=============================================================================
HRESULT CBill::LoadModel(void)
{
	//デバイス情報の取得
	LPDIRECT3DDEVICE9 pD3DDevice = CManager::GetRenderer()->GetDevice();

	// モデルの生成

	D3DXLoadMeshFromX("data/model/bill.x", D3DXMESH_SYSTEMMEM,
		pD3DDevice,
		NULL,
		&m_pBuffMat,
		NULL,
		&m_nNumMat,
		&m_pMesh);


	// 正常終了
	return S_OK;
}

//=============================================================================
// モデルアンロード
//=============================================================================
void CBill::Unload(void)
{
	//メッシュの破棄
	if (m_pMesh != NULL)
	{
		m_pMesh->Release();
		m_pMesh = NULL;
	}
	//マテリアルの破棄
	if (m_pBuffMat != NULL)
	{
		m_pBuffMat->Release();
		m_pBuffMat = NULL;
	}
}

//=============================================================================
// コンストラクタ
//=============================================================================
CBill::CBill()
{
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_fAngle = 0.0f;
}

//=============================================================================
// デストラクタ
//=============================================================================
CBill::~CBill()
{

}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CBill::Init(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	// モデルの情報を設定
	MODEL model;
	model.dwNumMat = m_nNumMat;
	model.pBuffer = m_pBuffMat;
	model.pMesh = m_pMesh;

	//モデル情報を設定
	CModel::BindModel(model);

	//位置の設定
	m_pos = pos;

	// 初期化	
	CModel::Init(m_pos, size);

	//rot初期化
	CModel::SetRot(m_rot);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CBill::Uninit(void)
{
	// 終了処理
	CModel::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CBill::Update(void)
{

}

//=============================================================================
// 描画処理
//=============================================================================
void CBill::Draw(void)
{
	// 描画処理
	CModel::Draw();
}

