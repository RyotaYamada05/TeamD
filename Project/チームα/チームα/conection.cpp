//=============================================================================
//
// 処理 [conection.cpp]
// Author : 伊藤　航
//
//=============================================================================

//********************************************************************************
// 
//********************************************************************************
#include "conection.h"
#include "tcp_client.h"

//********************************************************************************
// 
//********************************************************************************
#define HOSTNAME "127.0.0.1"

//********************************************************************************
// 
//********************************************************************************
CTcpClient *CConection::m_pClient = NULL;

//********************************************************************************
// 
//********************************************************************************
CConection::CConection()
{
	m_pClient = NULL;
	m_bPlay = false;
}

//********************************************************************************
// 
//********************************************************************************
CConection::~CConection()
{

}

//********************************************************************************
// 
//********************************************************************************
HRESULT CConection::Init(void)
{
	m_bPlay = false;

	m_nSore = 0;

	WSADATA wsaData;
	//char aDestlPAddr[128];

	// winsock初期化
	int nErr = WSAStartup(WINSOCK_VERSION, &wsaData);
	if (nErr != 0)
	{
		// 何らかの原因で初期化に失敗した
		//printf("WSAStartup failed\n");

		// キー入力待ち
		
		return E_FAIL;
	}

	return S_OK;
}

//********************************************************************************
// 
//********************************************************************************
void CConection::Uninit()
{
	if (m_pClient != NULL)
	{
		// ソケット接続をクローズ
		m_pClient->Close();

		delete m_pClient;
		m_pClient = NULL;
	}
	// winsock終了する
	WSACleanup();
}

//********************************************************************************
// 
//********************************************************************************
void CConection::Update(void)
{
	if (m_bPlay)
	{

	}
}

//********************************************************************************
// 
//********************************************************************************
bool CConection::CheckConect(void)
{
	bool bConect = false;
	if (m_pClient != NULL)
	{
		bConect = true;
	}
	return bConect;
}

//********************************************************************************
// 
//********************************************************************************
HRESULT CConection::DoConect (void)
{
	// ソケット接続を開始
	m_pClient = CTcpClient::Create(HOSTNAME, SERVER_PORT_NUM);
	if (m_pClient == NULL)
	{
		WSACleanup();
		return E_FAIL;
	}

	memset(m_aRecvBuffer, 0, sizeof(m_aRecvBuffer));
	m_pClient->Recv(m_aRecvBuffer, sizeof(m_aRecvBuffer));

	m_bPlay = true;

	return S_OK;
}